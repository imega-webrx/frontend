type Product implements Node {
    id: ID!
    title: String!
    fullTitle: String
    price: String
    vendors: [Vendor]
    offers: [Offer]
}

type Query {
    product(title: String!): [Product]
    searchProduct(in: SearchProductInput): [Product]
}

interface Node {
    id: ID!
}

input SearchProductInput {
    query: String!
}

input AddProductInput {
    id: ID!
}

type Mutation {
    addProduct(in: AddProductInput): [Product]!
}

type Vendor implements Node {
    id: ID!
    title: String!
}

type Offer implements Node {
    id: ID!
    seller: LegalEntity!
    prices: [Price]!
}

union LegalEntity = Person | Company

"Person and Company is union for LegalEntity"
type Person implements Node {
    id: ID!
    title: String!
}
type Company implements Node {
    id: ID!
    "Short and full name of the company"
    title: String!
    fullTitle: String
    "Statutory seat and postal address of the company"
    statutorySeat: Address
    address: Address
    "Any info of the company:"
    notes: [String]
}

"""
Represents a postal address, e.g. for postal delivery or payments addresses.
Given a postal address, a postal service can deliver items to a premise, P.O.
Box or similar.
It is not intended to model geographical locations (roads, towns,
mountains).

In typical usage an address would be created via user input or from importing
existing data, depending on the type of process.
"""
type Address implements Node {
    id: ID!

    """
    Required. CLDR region code of the country/region of the address. This
    is never inferred and it is up to the user to ensure the value is
    correct. See [Unicode CLDR Project](http://cldr.unicode.org/) and
    [Territory Information](http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html)
    for details. Example: "CH" for Switzerland.
    """
    regionCode: String

    """
    Optional. BCP-47 language code of the contents of this address (if
    known). This is often the UI language of the input form or is expected
    to match one of the languages used in the address' country/region, or their
    transliterated equivalents.
    This can affect formatting in certain countries, but is not critical
    to the correctness of the data and will never affect any validation or
    other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a
    possibly incorrect default).

    Examples -> "zh-Hant", "ja", "ja-Latn", "en".
    """
    languageCode: String

    """
    Optional. Postal code of the address. Not all countries use or require
    postal codes to be present, but where they are used, they may trigger
    additional validation with other parts of the address (e.g. state/zip
    validation in the U.S.A.).
    """
    postalCode: String

    """
    Optional. Additional, country-specific, sorting code. This is not used
    in most regions. Where it is used, the value is either a string like
    "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number
    alone, representing the "sector code" (Jamaica), "delivery area indicator"
    (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
    """
    sortingCode: String

    """
    Optional. Highest administrative subdivision which is used for postal
    addresses of a country or region.
    For example, this can be a state, a province, an oblast, or a prefecture.
    Specifically, for Spain this is the province and not the autonomous
    community (e.g. "Barcelona" and not "Catalonia").
    Many countries don't use an administrative area in postal addresses. E.g.
    in Switzerland this should be left unpopulated.
    """
    administrativeArea: String

    """
    Optional. Generally refers to the city/town portion of the address.
    Examples: US city, IT comune, UK post town.
    In regions of the world where localities are not well defined or do not fit
    into this structure well, leave locality empty and use address_lines.
    """
    locality: String

    """
    Optional. Sublocality of the address.
    For example, this can be neighborhoods, boroughs, districts.
    """
    sublocality: String

    """
    Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may
    sometimes contain multiple values in a single field (e.g.
    "Austin, TX"), it is important that the line order is clear. The order of
    address lines should be "envelope order" for the country/region of the
    address. In places where this can vary (e.g. Japan), address_language is
    used to make it explicit (e.g. "ja" for large-to-small ordering and
    "ja-Latn" or "en" for small-to-large). This way, the most specific line of
    an address can be selected based on the language.

    The minimum permitted structural representation of an address consists
    of a region_code with all remaining information placed in the
    address_lines. It would be possible to format such an address very
    approximately without geocoding, but no semantic reasoning could be
    made about any of the address components until it was at least
    partially resolved.

    Creating an address only containing a region_code and address_lines, and
    then geocoding is the recommended way to handle completely unstructured
    addresses (as opposed to guessing which parts of the address should be
    localities or administrative areas).
    """
    addressLines: [String]

    """
    Optional. The recipient at the address.
    """
    recipients: [Person]

    """
    This field may, under certain circumstances, contain multiline information.
    For example, it might contain "care of" information or
    a message indicating the direction to the place.
    """
    notes: [String]

    "An object representing a latitude/longitude pair."
    geoCoordinate: LatLng
}
"""
An object representing a latitude/longitude pair. This is expressed as a pair
of doubles representing degrees latitude and degrees longitude. Unless
specified otherwise, this must conform to the
[WGS84 standard](http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf).
Values must be within normalized ranges.
"""
type LatLng {
    "The latitude in degrees. It must be in the range [-90.0, +90.0]."
    latitude: Float
    "The longitude in degrees. It must be in the range [-180.0, +180.0]."
    longitude: Float
}

type Price implements Node {
    id: ID!
    type: String!

    "Header text of this offer"
    header: String
    "Description text of thus offer"
    description: String
    "Price value of this offer"
    price: Money
}

"Represents an amount of money with its currency type."
type Money {
    "The 3-letter currency code defined in ISO 4217"
    currencyCode: String

    """
    The whole units of the amount.
    For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
    """
    units: Int

    """
    Number of nano (10^-9) units of the amount.
    The value must be between -999,999,999 and +999,999,999 inclusive.
    If `units` is positive, `nanos` must be positive or zero.
    If `units` is zero, `nanos` can be positive, zero, or negative.
    If `units` is negative, `nanos` must be negative or zero.
    For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
    """
    nanos: Int
}
